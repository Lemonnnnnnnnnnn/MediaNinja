(function ($, _, Backbone) {
    "use strict";
    window.wp = window.wp || {};
    var playerInstance;
    var playerOptions;
    var srcType;
    var currentIndex = -1;
    const subtitleDirectory = "/subddr";
    var currentDomain;
    currentDomain = document.domain;
    var playlistContainer = $("div.wp-video-playlist");
    if (!deviceInfoQJ) {
      window.deviceInfoQJ = new UAParser();
    }
    var PlaylistView = Backbone.View.extend({
      initialize: function (options) {
        this.index = 0;
        this.settings = {};
        this.data = options.metadata || $.parseJSON(this.$("script.wp-playlist-script").html());
        this.playerNode = this.$(this.data.type);
        this.tracks = new Backbone.Collection(this.data.tracks);
        this.current = this.tracks.first();
        if (this.data.type === "audio") {
          this.currentTemplate = wp.template("wp-playlist-current-item");
          this.currentNode = this.$(".wp-playlist-current-item");
        }
        this.renderCurrent();
        if (this.data.tracklist) {
          this.itemTemplate = wp.template("wp-playlist-item");
          this.playingClass = "wp-playlist-playing";
          this.renderTracks();
        }
        _.bindAll(this, "clickTrack");
        if (!_.isUndefined(window._wpmejsSettings)) {
          this.settings = _.clone(_wpmejsSettings);
        }
        if (playerInstance) {
          playerInstance.dispose();
          playlistContainer[0].innerHTML = "<video crossorigin=\"anonymous\" id=\"vjsp\" class=\"video-js vjs-default-skin vjs-big-play-centered vjs-fluid vjs-playback-rate\" controls=\"controls\" x5-playsinline=\"\" preload=\"none\" webkit-playsinline playsinline></video>" + playlistContainer[0].innerHTML;
        }
        this.setPlayer();
      },
      setPlayer: function (isTrackChange) {
        function getQueryParam(param) {
          var regex = new RegExp("(^|&)" + param + "=([^&]*)(&|$)", "i");
          var result = window.location.search.substr(1).match(regex);
          var value = "";
          if (result != null) {
            value = result[2];
          }
          regex = null;
          result = null;
          if (value == null || value == "" || value == "undefined") {
            return "";
          } else {
            return value;
          }
        }
        var episodeNumber = parseInt(getQueryParam("ep"));
        var noSubtitle = parseInt(getQueryParam("nosub"));
        if (!isTrackChange) {
          if (episodeNumber >= 1 && episodeNumber != this.index + 1 && episodeNumber <= this.tracks.length) {
            this.index = episodeNumber - 1;
            this.current = this.tracks.at(this.index);
            if (this.data.tracklist) {
              this.$(".wp-playlist-item").removeClass(this.playingClass).eq(this.index).addClass(this.playingClass);
            }
          }
          videojs.addLanguage("zh-CN", {
            "The media could not be loaded, either because the server or network failed or because the format is not supported.": "没有获取到视频地址，请尝试稍后刷新本页",
            "Toggle theater mode": "网页全屏",
            Quality: "画质",
            "subtitles off": "关闭",
            "subtitles settings": "设置"
          });
          var volumePanelOptions = {
            inline: false
          };
          var controlBarOptions = {
            volumePanel: volumePanelOptions
          };
          var userActionsOptions = {
            hotkeys: false
          };
          var playerConfig = {
            controlBar: controlBarOptions,
            userActions: userActionsOptions,
            language: "zh-CN",
            playbackRates: [0.5, 1, 1.25, 1.5, 2]
          };
          playerOptions = playerConfig;
        } else {
          window.history.replaceState(null, null, "?ep=" + (this.index + 1));
          episodeNumber = parseInt(getQueryParam("ep"));
        }
        var subtitleSource = this.current.get("subsrc");
        var [subtitleUrl, subtitleType] = subtitleSource.split(",");
        var isSubtitleAvailable = false;
        var isiOS = deviceInfoQJ.getOS().name == "iOS";
        var isAndroid = deviceInfoQJ.getOS().name == "Android";
        var isQQBrowser = isAndroid && /MQQBrowser/i.test(navigator.userAgent);
        var setVideoAttributesForAndroid = () => {
          var videoElement = document.querySelector("#vjsp_html5_api");
          videoElement.setAttribute("x5-video-player-type", "h5");
          videoElement.setAttribute("x5-video-player-fullscreen", "true");
          videoElement.setAttribute("x5-video-orientation", "landscape|portrait");
        };
        var checkSubtitleUrl = {
          url: subtitleDirectory + subtitleUrl,
          type: "HEAD",
          error: function () {}
        };
        checkSubtitleUrl.success = function () {
          isSubtitleAvailable = true;
          if (isQQBrowser) {
            setVideoAttributesForAndroid();
          }
        };
        $.ajax(checkSubtitleUrl);
        if (subtitleType == undefined) {
          subtitleType = "0";
        }
        var vttShift = this.current.get("vttshift");
        if (vttShift == undefined) {
          vttShift = 0;
        }
        var portNumber = this.current.get("portn");
        var source0 = this.current.get("src0");
        var source1 = this.current.get("src1");
        var source2 = this.current.get("src2");
        var source3 = this.current.get("src3");
        if (window.vjs_list_SrcType != -1) {
          srcType = window.vjs_list_SrcType;
        } else {
          srcType = this.current.get("srctype");
        }
        var userIP = this.current.get("userIP");
        var description = this.current.get("description");
        var cutTime = this.current.get("cut");
        var shouldResume = true;
        if (cutTime == 0) {
          shouldResume = false;
        }
        var checkUserLogin = {
          action: "is_user_logged_in"
        };
        var setVideoSource = () => {
          if (playerInstance.src() == "") {
            playerInstance.bigPlayButton.hide();
            if (source0.slice(-4) == "m3u8") {
              var m3u8Source = {
                src: source0,
                type: "application/vnd.apple.mpegurl"
              };
              playerInstance.src(m3u8Source);
            } else if (source0.slice(0, 5) == "https") {
              var httpsSource = {
                src: source0,
                type: "video/mp4"
              };
              playerInstance.src(httpsSource);
            } else {
              var fallbackSource = {
                src: "https://v.ddys.pro" + source0,
                type: "video/mp4"
              };
              playerInstance.src(fallbackSource);
            }
          }
        };
        if (isTrackChange) {
          playerInstance.dispose();
          playlistContainer[0].innerHTML = "<video crossorigin=\"anonymous\" id=\"vjsp\" class=\"video-js vjs-default-skin vjs-big-play-centered vjs-fluid vjs-playback-rate\" controls=\"controls\" x5-playsinline=\"\" preload=\"none\" webkit-playsinline playsinline></video>" + playlistContainer[0].innerHTML;
        }
        playerInstance = videojs("vjsp", playerOptions);
        playerInstance.ready(function () {
          if (description != "download") {
            jQuery("video").bind("contextmenu", function () {
              return false;
            });
          }
          var remoteTextTracks = this.remoteTextTracks();
          var trackCount = remoteTextTracks.length;
          while (trackCount--) {
            this.removeRemoteTextTrack(remoteTextTracks[trackCount]);
          }
          var textTrackSettings = this.textTrackSettings;
          textTrackSettings.setValues({
            backgroundColor: "#000",
            backgroundOpacity: "0",
            edgeStyle: "uniform"
          });
          if (cutTime != 0) {
            playerInstance.currentTime(cutTime);
          }
          var escapeKeyHandler = {
            key: function (event) {
              return event.which === 27;
            }
          };
          escapeKeyHandler.handler = function (event, player, settings) {
            $(".vjs-theater-mode-control-close").click();
          };
          var customKeyBindings = {
            ctrldKey: escapeKeyHandler
          };
          var hotkeyConfig = {
            volumeStep: 0.1,
            seekStep: 5,
            customKeys: customKeyBindings
          };
          this.hotkeys(hotkeyConfig);
          var fullscreenOptions = {
            enterOnRotate: true,
            alwaysInLandscapeMode: true,
            iOS: false
          };
          var landscapeFullscreenConfig = {
            fullscreen: fullscreenOptions
          };
          this.landscapeFullscreen(landscapeFullscreenConfig);
          if (deviceInfoQJ.getOS().name == "Windows" || deviceInfoQJ.getOS().name == "Mac OS" || /Linux/i.test(navigator.userAgent)) {
            if (!isAndroid) {
              this.theaterMode({
                elementToToggle: "vjsp",
                className: "theater-mode"
              });
            }
          }
          if (document.getElementById("kasjbgih").clientHeight < 1) {
            playerInstance.ads();
            playerInstance.on("contentchanged", function () {
              playerInstance.trigger("adsready");
            });
            playerInstance.on("readyforpreroll", function () {
              playerInstance.ads.startLinearAdMode();
              playerInstance.src({
                src: "/13.m3u8",
                type: "application/vnd.apple.mpegurl"
              });
              playerInstance.one("adplaying", function () {
                playerInstance.trigger("ads-ad-started");
              });
              playerInstance.one("adended", function () {
                playerInstance.ads.endLinearAdMode();
              });
            });
            playerInstance.trigger("adsready");
          }
          if (true) {
            var ButtonComponent = videojs.getComponent("Button");
            var NextButton = videojs.extend(ButtonComponent, {
              constructor: function () {
                ButtonComponent.apply(this, arguments);
                this.addClass("icon-angle-right");
                this.controlText("下一集");
              },
              handleClick: function () {
                $("div.wp-playlist-playing").next().click();
              }
            });
            videojs.registerComponent("NextButton", NextButton);
            playerInstance.getChild("controlBar").addChild("NextButton", {}, 1);
          }
          function preventTouchMove(event) {
            event.preventDefault();
          }
          playerInstance.on("theaterMode", function (event, data) {
            var viewportContent;
            if (data.theaterModeIsOn) {
              document.body.parentNode.style.overflow = "hidden";
              var viewportMeta = document.querySelector("meta[name=\"viewport\"]");
              if (viewportMeta) {
                viewportContent = viewportMeta.content;
                viewportMeta.content = "width=device-width, initial-scale=1, user-scalable=yes, minimum-scale=1, maximum-scale=1";
              }
            } else {
              document.body.parentNode.style.overflow = "auto";
              document.removeEventListener("touchmove", preventTouchMove);
              document.querySelector("meta[name=\"viewport\"]").content = viewportContent;
            }
          });
          playerInstance.one("error", function () {
            console.log(playerInstance.error());
            console.log("https://" + window.location.host + "/senderrorcode/?where=" + encodeURIComponent(pathurijson));
            console.log(res);
            console.log("https://" + window.location.host + "/updateerrorcode/" + objid);
          });
          if (isNaN(episodeNumber)) {
            episodeNumber = 1;
          }
          var resumeConfig = {
            uuid: location.pathname + "?ep=" + episodeNumber,
            playbackOffset: 5,
            title: "恢复上次播放进度？",
            resumeButtonText: "是",
            cancelButtonText: "否"
          };
          playerInstance.Resume(resumeConfig);
        });
        playerInstance.one("loadeddata", () => {
          playerInstance.play();
        });
        playerInstance.bigPlayButton.one("click", setVideoSource);
        playerInstance.bigPlayButton.one("tap", setVideoSource);
        playerInstance.one("resumevideo", setVideoSource);
        playerInstance.one("play", function () {
          if (noSubtitle != 1 && isSubtitleAvailable == true) {
            var xhr = new XMLHttpRequest();
            xhr.open("get", subtitleDirectory + subtitleUrl, true);
            xhr.responseType = "arraybuffer";
            xhr.onload = function () {
              if (this.status == 200) {
                var responseData = this.response;
                var encryptedData = CryptoJS.lib.WordArray.create(responseData.slice(16));
                var ivHex = Array.prototype.map.call(new Uint8Array(responseData.slice(0, 16)), byte => ("00" + byte.toString(16)).slice(-2)).join("");
                var ivWordArray = CryptoJS.enc.Hex.parse(ivHex);
                var cipherParams = {
                  ciphertext: encryptedData
                };
                var decryptedData = CryptoJS.AES.decrypt(cipherParams, ivWordArray, {
                  iv: ivWordArray,
                  mode: CryptoJS.mode.CBC
                });
                var base64DecodedData = window.atob(decryptedData.toString(CryptoJS.enc.Base64));
                var byteLength = base64DecodedData.length;
                var byteArray = new Uint8Array(byteLength);
                for (var i = 0; i < byteLength; i++) {
                  byteArray[i] = base64DecodedData.charCodeAt(i);
                }
                var blob = new Blob([pako.ungzip(byteArray.buffer, {
                  to: "string"
                })], {
                  type: "image/png"
                });
                var imgElement = document.createElement("img");
                imgElement.src = window.URL.createObjectURL(blob);
                var subtitleTrack = {
                  kind: "subtitles",
                  src: imgElement.src,
                  srclang: "zh-cn",
                  label: "中文",
                  mode: "showing",
                  default: true
                };
                var track = subtitleTrack;
                playerInstance.addRemoteTextTrack(track, true);
              }
            };
            xhr.send();
          }
        });
      },
      renderCurrent: function () {},
      renderTracks: function () {
        var self = this;
        var trackNumber = 1;
        var tracksContainer = $("<div class=\"wp-playlist-tracks\"></div>");
        this.tracks.each(function (track) {
          if (!self.data.images) {
            track.set("image", false);
          }
          track.set("artists", self.data.artists);
          track.set("index", self.data.tracknumbers ? trackNumber : false);
          tracksContainer.append(self.itemTemplate(track.toJSON()));
          trackNumber += 1;
        });
        this.$el.append(tracksContainer);
        this.$(".wp-playlist-item").eq(0).addClass(this.playingClass);
      },
      events: {
        "click .wp-playlist-item": "clickTrack",
        "click .wp-playlist-next": "next",
        "click .wp-playlist-prev": "prev"
      },
      clickTrack: function (event) {
        event.preventDefault();
        this.index = this.$(".wp-playlist-item").index(event.currentTarget);
        this.setCurrent();
      },
      ended: function () {
        if (this.index + 1 < this.tracks.length) {
          this.next();
        } else {
          this.index = 0;
          this.setCurrent();
        }
      },
      next: function () {
        this.index = this.index + 1 >= this.tracks.length ? 0 : this.index + 1;
        this.setCurrent();
      },
      prev: function () {
        this.index = this.index - 1 < 0 ? this.tracks.length - 1 : this.index - 1;
        this.setCurrent();
      },
      loadCurrent: function () {
        var currentSrcExtension = this.playerNode.attr("src") && this.playerNode.attr("src").split(".").pop();
        var newSrcExtension = this.current.get("src").split(".").pop();
        if (this.mejs) {
          this.mejs.pause();
        }
        if (currentSrcExtension !== newSrcExtension) {
          this.setPlayer(true);
        } else {}
      },
      setCurrent: function () {
        this.current = this.tracks.at(this.index);
        if (this.data.tracklist) {
          this.$(".wp-playlist-item").removeClass(this.playingClass).eq(this.index).addClass(this.playingClass);
        }
        this.loadCurrent();
      }
    });
    function initializePlaylists() {
      window.vjs_list_SrcType = -1;
      $(".wp-playlist:not(:has(.mejs-container))").each(function () {
        var options = {
          el: this
        };
        new PlaylistView(options);
      });
    }
    var playlistManager = {
      initialize: initializePlaylists
    };
    window.wp.playlist = playlistManager;
    $(document).ready(initializePlaylists);
    window.WPPlaylistView = PlaylistView;
  })(jQuery, _, Backbone);
